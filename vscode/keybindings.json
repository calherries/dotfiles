// Place your key bindings in this file to override the defaultsauto[]
[
  {
    "key": "ctrl+alt+9",
    "command": "workbench.action.increaseViewSize"
  },
  {
    "key": "ctrl+alt+0",
    "command": "workbench.action.decreaseViewSize"
  },
  {
    "key": "cmd+enter",
    "command": "list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "enter",
    "command": "-list.select",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+alt+c j",
    "command": "calva.jackIn",
    "when": "calva:keybindingsEnabled && workspaceFolderCount > 0"
  },
  {
    "key": "ctrl+alt+c ctrl+alt+j",
    "command": "-calva.jackIn",
    "when": "calva:keybindingsEnabled && workspaceFolderCount > 0"
  },
  {
    "key": "ctrl+down",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+up",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+shift+alt+p",
    "command": "paredit.raiseSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+p ctrl+alt+r",
    "command": "-paredit.raiseSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+down",
    "command": "-extension.vim_ctrl+down",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+up",
    "command": "-extension.vim_ctrl+up",
    "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "command": "vscode-neovim.compositeEscape1",
    "key": "f",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "f"
  },
  {
    "command": "vscode-neovim.compositeEscape2",
    "key": "d",
    "when": "neovim.mode == insert && editorTextFocus",
    "args": "d"
  },
  {
    "key": "ctrl+alt+p",
    "command": "paredit.wrapAroundParens",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+p",
    "command": "-paredit.wrapAroundParens",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+l",
    "command": "paredit.forwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+down",
    "command": "-paredit.forwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+a",
    "command": "calva-fmt.alignCurrentForm",
    "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure' && editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+alt+l",
    "command": "-calva-fmt.alignCurrentForm",
    "when": "calva:keybindingsEnabled && editorTextFocus && !editorReadOnly && !hasOtherSuggestions && !suggestWidgetVisible && editorLangId == 'clojure' && editorLangId == 'clojure'"
  },
  {
    "key": "ctrl+alt+h",
    "command": "paredit.backwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+up",
    "command": "-paredit.backwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+cmd+1",
    "command": "magic-racket.executeSelectionInRepl",
    "when": "editorHasSelection && resourceLangId == 'racket'"
  },
  {
    "key": "alt+enter",
    "command": "-magic-racket.executeSelectionInRepl",
    "when": "editorHasSelection && resourceLangId == 'racket'"
  },
  {
    "key": "alt+backspace",
    "command": "-paredit.forceDeleteBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap == 'strict'"
  },
  {
    "key": "alt+l",
    "command": "paredit.forwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+right",
    "command": "-paredit.forwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+h",
    "command": "paredit.backwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "alt+left",
    "command": "-paredit.backwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+left",
    "command": "paredit.selectBackwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && vim.mode != 'Insert'"
  },
  {
    "key": "shift+alt+left",
    "command": "-paredit.selectBackwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+alt+right",
    "command": "paredit.selectForwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/ && vim.mode != 'Insert'"
  },
  {
    "key": "shift+alt+right",
    "command": "-paredit.selectForwardSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+k",
    "command": "paredit.backwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+up",
    "command": "-paredit.backwardUpSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+j",
    "command": "paredit.forwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+down",
    "command": "-paredit.forwardDownSexp",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+w",
    "command": "paredit.rangeForDefun",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+w space",
    "command": "-paredit.rangeForDefun",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+;",
    "command": "paredit.closeList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+end",
    "command": "-paredit.closeList",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  }
]
